name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

env:
  DOCKER_IMAGE_NAME: gdrive-rmi-app
  REGISTRY: docker.io

jobs:
  build-and-test:
    name: Build and Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Compile Java source files
        run: |
          echo "Compiling Part 1..."
          cd Part1 && javac *.java && cd ..

          echo "Compiling Part 2..."
          cd Part2 && javac *.java && cd ..

          echo "Compiling Part 3..."
          cd Part3 && javac *.java && cd ..

      - name: Verify compiled classes
        run: |
          echo "Checking Part 1 classes..."
          ls -la Part1/*.class

          echo "Checking Part 2 classes..."
          ls -la Part2/*.class

          echo "Checking Part 3 classes..."
          ls -la Part3/*.class

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          load: true
          tags: ${{ env.DOCKER_IMAGE_NAME }}:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test Docker image - Part 1 Server
        run: |
          docker run -d --name test-part1-server \
            -e JAVA_RMI_SERVER_HOSTNAME=localhost \
            ${{ env.DOCKER_IMAGE_NAME }}:test part1 server

          # Wait for server to start
          sleep 10

          # Check if server is running
          docker logs test-part1-server

          # Cleanup
          docker stop test-part1-server
          docker rm test-part1-server

      - name: Test Docker image - Part 2 Server
        run: |
          docker run -d --name test-part2-server \
            -e JAVA_RMI_SERVER_HOSTNAME=localhost \
            ${{ env.DOCKER_IMAGE_NAME }}:test part2 server

          sleep 10
          docker logs test-part2-server
          docker stop test-part2-server
          docker rm test-part2-server

      - name: Test Docker image - Part 3 Server
        run: |
          docker run -d --name test-part3-server \
            -e JAVA_RMI_SERVER_HOSTNAME=localhost \
            ${{ env.DOCKER_IMAGE_NAME }}:test part3 server

          sleep 10
          docker logs test-part3-server
          docker stop test-part3-server
          docker rm test-part3-server

      - name: Test Docker Compose
        run: |
          docker compose version
          docker compose config

  docker-push:
    name: Push to Docker Hub
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Image digest
        run: echo ${{ steps.meta.outputs.digest }}

  security-scan:
    name: Security Scan
    needs: build-and-test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build image for scanning
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          load: true
          tags: ${{ env.DOCKER_IMAGE_NAME }}:scan

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.DOCKER_IMAGE_NAME }}:scan
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
